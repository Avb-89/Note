
## === Установка ===
 For Ubuntu - `$ sudo apt-get install git`

 For Mac - Он предустановлен, если не ошибка:
 xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
 то:
  # xcode-select --install

## === Настройка ===
`$ git config  user.name "My Name"`

`$ git config  user.email myEmail@example.com`

    #Git хранит весь пакет конфигураций в файле .gitconfig, находящемся в вашем локальном каталоге. Чтобы сделать эти настройки глобальными, то есть применимыми ко всем проектам, необходимо добавить флаг –-global.

`$ git config --list`

    #посмотреть все настройки системы

`$ git config color.ui true`

`$ git config color.status auto`

`$ git config color.branch auto`

    #Для удобства и легкости зрительного восприятия, некоторые группы команд в Гит можно выделить цветом (для применимыми ко всем проектам --global)

## === Создание нового репозитория ===

    #git хранит свои файлы и историю прямо в папке проекта
    в  .git, будет храниться история репозитория и настройки

`$ mkdir Desktop/git_exercise/ ` - создаем папку

`$ cd Desktop/git_exercise/ ` - заходим в нее

`$ git init ` - инициирукм git репозиторий

## === Определение состояния ===

`$ git status`

    #показывает информацию о текущем состоянии репозитория: актуальна ли информация на нём, нет ли чего-то нового, что поменялось, и так далее.

## === Подготовка файлов ===

`$ git add hello.txt` - добавить один файл

`$ git add -A` - добавить все файлы в проэкте

    # Конечно добавлять всё сразу удобнее, чем прописывать каждую позицию отдельно. Однако, тут надо быть внимательным, чтобы не добавить по ошибке ненужные элементы. Если же такое произошло изъять оттуда ошибочный файл можно при помощи команды git reset:

`$ git reset . ` - все файлы

`$ git reset css/style.css` - определенный файл

    # создадим непосредственно сам коммит

`$ git commit -m 'Add some code' ` 

    # Флажок -m задаст commit message - комментарий разработчика. Он необходим для описания закоммиченных изменений. И здесь работает золотое правило всех комментариев в коде: «Максимально ясно, просто и содержательно обозначь написанное!»

## === Как посмотреть коммиты ===

`$ git log`
`$ git show hash_commit `

    #Чтобы увидеть разницу между двумя коммитами, используется команда diff (с указанием промежутка между коммитами)

`$ git diff hash_commit `

    #переделать commit message и внести туда новый комментарий

`$ git commit --amend -m 'Новый комментарий'`

    #### WARNING!!!!! В данном случае сообщение последнего коммита перезапишется. Но злоупотреблять этим не стоит, поскольку эта операция опасная и лучше ее делать до отправки коммита на сервер

## === Возвращение файла к предыдущему состоянию ===

`$ git checkout hash_commit hello.txt`

## === Исправление коммита ===

    # Эта команда создаст коммит, отменяющий изменения, совершенные в коммите с заданным идентификатором.
    Самый последний коммит может быть доступен по алиасу HEAD

`$ git revert HEAD`

    # Для остальных будем использовать идентификаторы:

`$ git revert hash_commit`

## === Удаленные репозитории ===
    #Сейчас наш коммит является локальным — существует только в директории .git на нашей файловой системе

#### 1. Клонирование

`$ git clone https://github.com/tutorialzine/awesome-project` - чтобы скачать только содержимое папки, добавим в конец "." или указать название папки "my_folder"

#### 2. Подключение к удаленному репозиторию

`$ git remote add origin https://gitlab.autostat.ru/bugakov/FNP_app.git`

    # Проект может иметь несколько удаленных репозиториев одновременно. Чтобы их различать, мы дадим им разные имена. Обычно главный репозиторий называется origin.

#### 3. Отправка изменений на сервер

`$ git push origin master`

    #Эта команда немного похожа на git fetch, с той лишь разницей, что при помощи fetch мы импортируем коммиты в локальную ветку, а при применив push, мы экспортируем их из локальной в удаленную

    git push - командой выгрузки,
    git pull и git fetch - командами загрузки или скачивания

#### 4. Запрос изменений с сервера

`$ git pull origin master`

## === Как удалить локальный репозиторий ===

    # Чтобы удалить репозиторий у себя на компьютере, надо удалить папку .git в папке проэкта

`$ cd repository-path/`

`rm -r .git`

## === Ветвление ===

    # Во время разработки новой функциональности считается хорошей практикой работать с копией оригинального проекта, которую называют веткой. Ветви имеют свою собственную историю и изолированные друг от друга изменения до тех пор, пока вы не решаете слить изменения вместе. Это происходит по набору причин:

    - Уже рабочая, стабильная версия кода сохраняется.
    - Различные новые функции могут разрабатываться параллельно разными программистами.
    - Разработчики могут работать с собственными ветками без риска, что кодовая база поменяется из-за чужих изменений.
    - В случае сомнений, различные реализации одной и той же идеи могут быть разработаны в разных ветках и затем сравниваться.

#### 1. Создание новой ветки

`$ git branch new_branch`

#### 2. Переключение между ветками

`$ git branch` - отобразить какие ветки есть в репозитории (проэкте)

`$ git checkout new_branch`

#### 3. Слияние веток
    # При слиянии веток второстепенная ветка никуда не исчезает, просто изменения из одной ветки переносятся в другую (выглядит как синхранизация)

    # сначала нужно переключиться на ветку в ветку в которую мерджим

`$ git checkout master`

`$ git merge new_branch`

    # Если хотите создать копию удаленного репозитория - используйте git clone. Однако если вам нужна только определенная его ветка, а не все хранилище - после git clone выполните 

`git checkout -b <имя ветки> origin/<имя ветки>` - После этого, новая ветка создается на машине автоматически.

## === Как удалять ветки в Git? ===

    # Чтобы удалить ненужную(смерженую) ветку, не забываем переключиться на другую ветку например master

`$ git branch -d new_branch`

